1.基本类型和引用类型：
  除object之外的基本类型都是按值访问，对象则是通过访问内存中对象的引用；基本类型无法添加和改变属性；复制基本类型值会产生一个独立副本，而复制引用类型值时两者是指向同一个对象的指针；
  检测基本类型值时使用typeof，检测引用类型值时使用instanceof；

2.执行环境和作用域：
  全局和局部环境（某个函数）。某个执行环境中的所有代码执行完后，该环境被销毁，其中的所有变量和函数定义也随之消失；
  全局执行环境：Web浏览器中，全局执行环境被认为是window对象；
  每个函数也都有自己的执行环境，执行流（ECMAScript）进入函数，该函数环境被推入一个环境栈；
  代码在一个环境中执行，会创建一个作用域链，用途是保证对执行环境有权访问的所有变量和函数有序访问

  延长作用域链：try-catch语句中的catch以及with语句

  js没有块级作用域（任何花括号中的代码块），例如在if和for中的变量可以在if和for之外访问：
  （1）声明变量：使用var声明的变量自动被添加到最接近的环境中，没有用var声明会被添加到全局环境；
  （2）查询标识符：某环境中出现一个标识符时，要通过搜索确定该标识符代表什么，从作用域链前端开始，向上逐级查询，匹配到的第一个停止搜索，变量就绪；若全局中都没找到，则算未声明；

3.垃圾收集：js具有自动垃圾收集机制
  （1）标记清除：变量进入某环境，标记该变量，离开环境时进行离开标记，释放内存；
  （2）引用计数：声明某变量并将引用类型值赋给该变量，该值引用次数为1，每被赋给一次就加1；若包含对这个值引用的变量取得另外一个值，则减1，该值变成0时就释放内存空间；
  （3）管理内存：为了占用最少内存达到更好性能，要将不再使用的变量赋值为null来释放其引用；
